@using Reactive.Bindings
@using Reactive.Bindings.Extensions
@using Reactive.Bindings.Components
@using System.Reactive.Linq
@using System.Reactive.Disposables
@using System.Reactive.Concurrency
@page "/"
@implements IDisposable
@inject ValidationViewModel _validationViewModel
@inject HelloWorldViewModel _helloWorldViewModel

<h1>ReactiveProperty samples</h1>

<h3>Hello world</h3>

<input class="form-control" type="text" @bind="_helloWorldViewModel.Input.Value" @bind:event="oninput" />
<div class="alert alert-primary">
    @_helloWorldViewModel.Output.Value
</div>

<h3>Validation sample</h3>

<EditForm Model="_validationViewModel" OnInvalidSubmit="InvalidSubmit" OnValidSubmit="ValidSubmit">
    <ReactivePropertiesValidator />

    <ValidationSummary />

    <div class="mb-3">
        <label for="firstName">First name</label>
        <InputText @bind-Value="_validationViewModel.FirstName.Value" class="form-control" />
        <ValidationMessage For="() => _validationViewModel.FirstName.Value" />
    </div>
    <div class="mb-3">
        <label for="firstName">Last name</label>
        <InputText @bind-Value="_validationViewModel.LastName.Value" class="form-control" />
        <ValidationMessage For="() => _validationViewModel.LastName.Value" />
    </div>

    <div class="mb-3">
        <span>Full name: @_validationViewModel.FullName.Value</span>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-primary">
        <span>@_message</span>
    </div>
}

@code {
    private readonly CompositeDisposable _disposable = new();
    private string? _message;

    private void InvalidSubmit(EditContext context)
    {
        _message = "InvalidSubmit was invoked.";
    }

    private void ValidSubmit(EditContext context)
    {
        _message = "ValidSubmit was invoked.";
    }

    protected override void OnInitialized()
    {
        _validationViewModel.AddTo(_disposable);
        _helloWorldViewModel.AddTo(_disposable);

        _helloWorldViewModel.Output
            .Subscribe(_ => InvokeAsync(StateHasChanged))
            .AddTo(_disposable);
    }

    public void Dispose() => _disposable.Dispose();
}
